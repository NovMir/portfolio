---
import SVGPetalsAnimation from './PetalBackground.astro';

interface Props {
  frontmatter?: {
    cover?: string;
    thumbnail?: string;
    backgroundImage?: string;
  };
  height?: string;
  showPetals?: boolean;
  petalCount?: number;
  title?: string;
  subtitle?: string;
}

const { 
  frontmatter = {}, 
  height = "min-h-[40vh] md:min-h-[50vh] lg:min-h-[60vh]", // Responsive height
  showPetals = true,
  petalCount = 20,
  title,
  subtitle
} = Astro.props;

// Determine background image with fallback cascade
const backgroundImage = frontmatter.cover || 
                        frontmatter.thumbnail || 
                        frontmatter.backgroundImage || 
                        "/images/default-background.jpg"; // Default fallback

const hasBackgroundImage = !!backgroundImage;
---

<div class="relative w-full">
  <!-- Fixed background image container with gradient overlay -->
  {hasBackgroundImage && (
    <div 
      id="hero-background" 
      class="fixed w-full top-0 left-0 z-0 bg-cover bg-center bg-no-repeat"
      style={`background-image: url(${backgroundImage});`}
    >
      <!-- Gradient overlay for better text readability -->
      <div class="absolute inset-0 bg-gradient-to-t from-fairy_tale-100/90 dark:from-fairy_tale-100/95 to-transparent"></div>
      
      <!-- SVG Petal animation -->
      {showPetals && (
        <SVGPetalsAnimation petalCount={petalCount} scrollFade={true} className="z-10" />
      )}
    </div>
  )}
  
  <!-- Responsive content container -->
  <div 
    class={`relative z-10 w-full flex flex-col justify-center items-center ${height} px-4 md:px-8 ${hasBackgroundImage ? "" : "bg-fairy_tale-100/10 dark:bg-fairy_tale-200/10"}`}
  >
    <div class="text-center max-w-4xl mx-auto">
      {title && (
        <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-fairy_tale-800 dark:text-white mb-4">
          {title}
        </h1>
      )}
      
      {subtitle && (
        <p class="text-lg md:text-xl text-fairy_tale-600 dark:text-fairy_tale-300 mb-8">
          {subtitle}
        </p>
      )}
      
      <!-- Main hero content slot -->
      <div class="w-full">
        <slot />
      </div>
    </div>
  </div>
</div>

<script>
  // Improved scroll-based effects
  document.addEventListener('DOMContentLoaded', () => {
    const heroBackground = document.getElementById('hero-background');
    if (!heroBackground) return;
    
    // Set initial height to match viewport
    const updateHeight = () => {
      const viewportHeight = window.innerHeight;
      heroBackground.style.height = `${viewportHeight}px`;
    };
    
    // Update height on load and resize
    updateHeight();
    window.addEventListener('resize', updateHeight);
    
    // Scroll-based blur and opacity effects
    window.addEventListener('scroll', () => {
      const scrollPosition = window.scrollY;
      const viewportHeight = window.innerHeight;
      const scrollPercentage = Math.min(scrollPosition / (viewportHeight * 0.6), 1);
      
      // Apply blur and opacity based on scroll percentage
      const blurAmount = scrollPercentage * 10; // Max 10px blur
      const opacityValue = 1 - scrollPercentage * 0.5; // Min 0.5 opacity
      
      heroBackground.style.filter = `blur(${blurAmount}px)`;
      heroBackground.style.opacity = `${opacityValue}`;
    });
  });
</script>

<style>
  #hero-background {
    transition: filter 0.2s ease-out, opacity 0.2s ease-out;
    will-change: filter, opacity;
  }
</style>